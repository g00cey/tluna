set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"original repos on github
Plugin 'VundleVim/Vundle.vim'
Plugin 'go.vim'
Plugin 'CtrlP.vim'
Plugin 'grep.vim'
Plugin 'gabrielelana/vim-markdown'
"Bundle 'shougo/vimproc'
Plugin 'shougo/vimshell'
Plugin 'dbext.vim'
Plugin 'Shougo/vimfiler.vim'
Plugin 'fugitive.vim'
Plugin 'vimgrep.vim'
Plugin 'listtag'
Plugin 'git://github.com/thinca/vim-ref.git'
Plugin 'git://github.com/tpope/vim-rails.git'
Plugin 'eruby.vim'
Plugin 'ruby.vim'
Plugin 'Align'
Plugin 'matchit.zip'
Plugin 'neocomplcache'
Plugin 'EnhCommentify.vim'
"Bundle 'unite.vim'
Plugin 'surround.vim'
Plugin 'quickrun'
Plugin 'superSnipMate'
Plugin 'local_vimrc.vim'
Plugin 'quickrun.vim'
Plugin 'copypath.vim'
Plugin 'vcscommand.vim'
Plugin 'https://github.com/wesleyche/SrcExpl.git'
Plugin 'https://github.com/scrooloose/nerdtree.git'
Plugin 'https://github.com/wesleyche/Trinity.git'
Plugin 'taglist.vim'
Plugin 'tabpage.vim'
if has("win32") || has("win64")
  Plugin 'BlockDiff'
  Plugin 'DirDiff.vim'
else
  Plugin 'DirDiff.vim'
endif

call vundle#end()
"vim basic settings
filetype plugin indent on
syntax on

"templates
augroup SkeletonAu
  autocmd!
  autocmd BufNewFile *.html 0r ~/.vim/templates/skel.html
augroup END
"statusline
set showcmd "ステータスラインにコマンドを表示
set laststatus=2 "ステータスラインを常に表示
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P

"filetype
au! BufNewFile,BufRead *.changelog setf changelog

"xpath-search
"let g:loaded_xpath = 1

" netrwは常にtree view
let g:netrw_liststyle = 3
" CVSと.で始まるファイルは表示しない
let g:netrw_list_hide = 'CVS,\(^\|\s\s\)\zs\.\S\+'
" 'v'でファイルを開くときは右側に開く。(デフォルトが左側なので入れ替え)
let g:netrw_altv = 1
" 'o'でファイルを開くときは下側に開く。(デフォルトが上側なので入れ替え)
let g:netrw_alto = 1

"ssh
if (has('win32') || has('win64'))
    "use scp
    let g:netrw_scp_cmd = "C:\\soft\\putty\\pscp.exe -q batch"
    let g:netrw_sftp_cmd = "C:\\soft\\putty\\psftp.exe"
    let g:netrw_ssh_cmd = "C:\\soft\\putty\\plink.exe"
    if $MACHINE_NAME=='aspire_one'
      let g:netrw_scp_cmd = "D:\\soft\\puttyjp\\pscp.exe -q batch"
      let g:netrw_sftp_cmd = "D:\\soft\\puttyjp\\psftp.exe"
      let g:netrw_ssh_cmd = "D:\\soft\\puttyjp\\plink.exe"
    endif
endif

"fold
set foldmethod=manual

" edit
set showmatch
set matchtime=1
set wildmenu
set ruler

"wildmode
set wildmode=longest,list

"tab
set list
set lcs=tab:>.,trail:_,extends:\
highlight SpecialKey cterm=NONE ctermfg=7 guifg=LightRed
highlight JpSpace cterm=underline ctermfg=7 guifg=LightRed
au BufRead,BufNew * match JpSpace /　/

"display
set number

"print
set printoptions=number:y

"filebackup
set backup
set swapfile
if has("win32") || has("win64")
  set dir=~/_vim/swap
  set backupdir=~/_vim/backup
  set undodir=~/_vim/undo
else
  set dir=~/.vim/swap
  set backupdir=~/.vim/backup
  set undodir=~/.vim/undo
endif

"fileenconrdings
set fileencodings=utf-8,iso-2022-jp,sjis,eucjp

imap <C-Space> <C-x><C-o>

"vim/ruby
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1

"grep
if has("win32") || has("win64")
  if $MACHINE_NAME=='aspire_one'
    let Grep_Path             = 'D:\bin\bin\grep.exe'
    let Fgrep_Path            = 'D:\bin\bin\fgrep.exe -F'
    let Egrep_Path            = 'D:\bin\bin\egrep.exe -E'
    let Grep_Find_Path        = 'D:\bin\bin\find.exe'
    let Grep_Xargs_Path       = 'D:\bin\bin\xargs.exe'
    let Grep_Shell_Quote_Char = '"'
    let Grep_Skip_Dirs = '.svn'
    let Grep_Skip_Files = '*.bak'
  else
    let Grep_Path             = 'C:\gnu\bin\grep.exe'
    let Fgrep_Path            = 'C:\gnu\bin\fgrep.exe -F'
    let Egrep_Path            = 'C:\gnu\bin\egrep.exe -E'
    let Grep_Find_Path        = 'C:\gnu\bin\find.exe'
    let Grep_Xargs_Path       = 'C:\gnu\bin\xargs.exe'
    let Grep_Shell_Quote_Char = '"'
    let Grep_Skip_Dirs = '.svn'
    let Grep_Skip_Files = '*.bak'
  endif
else
  let Grep_Path             = 'grep'
  let Fgrep_Path            = 'fgrep'
  let Egrep_Path            = 'egrep'
  let Grep_Find_Path        = 'find'
  let Grep_Xargs_Path       = 'xargs'
  let Grep_Shell_Quote_Char = '"'
  let Grep_Skip_dirs = '.svn'
  let Grep_Skip_Files = '*.bak'
endif


""vim extract settings
"php lint
nmap ,l :execute '!php -l %'

imap <C-Space> <C-x><C-o>

"align
let g:Align_xstrlen = 3

"localvimrc
let g:local_vimrc=1

"rails.vim
let g:rails_dbext      = 1
let g:rails_gnu_screen = 1
let g:rails_modelines  = 1

"ref
"alc (eijirou)
nmap ,ra :<C-u>Ref alc<Space>
"refe (ruby-refe)
nmap ,rr :<C-u>Ref refe<Space>
let g:ref_alc_start_linenumber = 100 "表示する行数
let g:ref_alc_encoding = 'Shift-JIS'

"neocomplcache
let g:neocomplcache_enable_at_startup = 1 " 起動時に有効化

"cgi file-type php
au! BufNewFile,BufRead *.cgi setf php

"srcexplorer
" // The switch of the Source Explorer
nmap <F8> :SrcExplToggle<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to Avoid conflicts, the Source Explorer should know what plugins
" // are using buffers. And you need add their bufname into the list below
" // according to the command ":buffers!"
let g:SrcExpl_pluginList = [
      \ "__Tag_List__",
      \ "_NERD_tree_",
      \ "Source_Explorer"
    \ ]

" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 1

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" //  create/update a tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" // Set "<F12>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F12>"

" //another vim settings read
if filereadable(expand('~/rcfiles/dbsettings'))
  source ~/rcfiles/dbsettings
endif

"unite
" 大文字小文字を区別しない
"let g:unite_enable_ignore_case = 1
"let g:unite_enable_smart_case = 1
" grep検索
"nnoremap <silent> ,g  :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

" unite grep に ag(The Silver Searcher) を使う
"if executable('ag')
"  let g:unite_source_grep_command = 'ag'
"  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
"  let g:unite_source_grep_recursive_opt = ''
"  let g:ctrlp_use_caching=0 " CtrlPのキャッシュを使わない
"  let g:ctrlp_user_command='ag %s -i --hidden -g ""' " 「ag」の検索設定
"endif

